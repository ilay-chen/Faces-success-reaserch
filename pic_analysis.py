# -*- coding: utf-8 -*-
"""pic_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M7KwUpImK3fQuwOeTHQ6cxUqEtOG-FzD
"""

# Commented out IPython magic to ensure Python compatibility.
#init
import numpy as np
import tensorflow as tf
from cv2 import imread
from cv2 import imshow
from cv2 import waitKey
from cv2 import destroyAllWindows
from cv2 import CascadeClassifier
from cv2 import rectangle
import glob
import openpyxl
# %matplotlib inline
from matplotlib import pyplot as plt
import os
# load the pre-trained model
classifier = CascadeClassifier('drive/My Drive/academy research/exercise/haarcascade_frontalface_default.xml')

from google.colab import drive
drive.mount('/content/drive', )

drive.flush_and_unmount()

#dirs
directory_pics = "drive/My Drive/academy research/research/Unprocessed documents/Data_Pilat/websrv"
#directory_pics = "drive/My Drive/academy research/exercise/females_ready/amandine"

sort_img(0)

def getAllIds():
  allIds = []
  wb = openpyxl.load_workbook("drive/My Drive/תוצאת מבחנים האוניברסיטה העברית.xlsx")
  ws = wb['גיליון1']
  for row in ws.iter_rows('A{}:A{}'.format(ws.min_row,ws.max_row)):
      for cell in row:
        if(cell.value not in allIds):
            #print (cell.value)
            allIds.append(cell.value)

def sort_img(limit):
  wb = openpyxl.load_workbook("drive/My Drive/תוצאת מבחנים האוניברסיטה העברית.xlsx")
  ws = wb['גיליון1']
  allIds = []
  for row in ws.iter_rows('A{}:A{}'.format(ws.min_row,ws.max_row)):
      for cell in row:
        if(cell.value not in allIds):
            #print (cell.value)
            allIds.append(cell.value)
  
  if limit == 0:
    limit = len(allIds)
  
  for index, idName in zip(range(limit),allIds):
    if index == 0 : continue
    img_path = "drive/My Drive/academy research/research/processed documents/Data_Pilat/" + "sorting_img/" + str(idName)
    if not os.path.exists(img_path):
      if len(glob.glob1(directory_pics,"*"+str(idName)+".*")) > 0:
        print(index,"NEW DIR! MAKE:",idName)
        os.makedirs(img_path)
        save_img(idName, img_path)
      else:
        print(index,"NO IMAGE WITH THIS ID!", idName)
    if os.path.exists(img_path):
      print(index,"DIR IS EXIST:",idName)

for root, dirs, files in os.walk(directory_pics):
  for file in files:
    print(file)

def save_img(idName, img_path):
  print(str(idName) + "=>")
  for filepath in glob.iglob(directory_pics+"/*"+str(idName)+".*"):
      #pathlib.Path(img_path).mkdir(parents=True, exist_ok=False)
      print(str(idName) + "=>" + filepath)
      pixels = imread(filepath)
      img_name = filepath.split("/")[7]
      print(img_name)
      inn = img_name.replace("_"+str(idName),"")
      print(inn)
      #image(pixels)
      img=mpimg.imread(filepath)
      imgplot = plt.imshow(img)
      plt.show()
      print("SAVE TO PATH" + "=>" + img_path)
      print("SAVE TO NAME OF FILE" + "=>" + inn)
      copyfile(filepath, img_path + "/" + inn)
      #copyfile(filepath, dst)
      #tf.io.write_file(inn, pixels)
      #print(filepath)

def detect_face(img):
  bboxes = classifier.detectMultiScale(img)
  for box in bboxes:
    x, y, width, height = box
    box = [y, x, width, height]
    return tf.image.crop_to_bounding_box(img, box[0], box[1], box[2], box[3])
  return img

path_to_prosses = "drive/My Drive/academy research/exercise/females_ready/"
def procces_image(row_images):
  i = 0
  for image_name in row_images:
    folder_name = image_name.split("_")[0]
    long_path = directory_to_extract_to + "/" + folder_name + "/" + image_name
    print(long_path)
    pixels = imread(long_path)
    newpix = detect_face(pixels)
    path_to_save = path_to_prosses + folder_name + "/" + folder_name + "_" + str(i) + ".jpeg"
    plt.imshow(newpix)
    plt.show()
    save_image(newpix, path_to_save)
    i += 1

def save_image(img, path):
  gray = tf.image.rgb_to_grayscale(img)
  enc = tf.image.encode_jpeg(gray)
  tf.io.write_file(path, enc)

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from shutil import copyfile

import pathlib
tempId = 261139
img_path = "drive/My Drive/academy research/research/processed documents/Data_Pilat/" + "sorting_img/" + str(tempId)
#if not os.path.exists(img_path):
#  os.makedirs(img_path)
#save_img(tempId)

pics = tf.io.gfile.listdir(directory_pics)
#npp = np.array(folders)
#print(pics)
b = np.array(pics)
#procces_image(b)
print(b)
#npp = np.hstack((npp, b))

path_to_prosses = "drive/My Drive/academy research/exercise/females_ready/"
def procces_image(row_images):
  i = 0
  for image_name in row_images:
    folder_name = image_name.split("_")[0]
    long_path = directory_to_extract_to + "/" + folder_name + "/" + image_name
    print(long_path)
    pixels = imread(long_path)
    newpix = detect_face(pixels)
    path_to_save = path_to_prosses + folder_name + "/" + folder_name + "_" + str(i) + ".jpeg"
    plt.imshow(newpix)
    plt.show()
    save_image(newpix, path_to_save)
    i += 1